from aiogram import Router, F
from aiogram.filters import Command
from aiogram.types import Message, CallbackQuery, InlineKeyboardButton, InlineKeyboardMarkup
from aiogram.fsm.context import FSMContext

from database.user import User
from database.service import Service
from database.queue_entry import QueueEntry
from config import db
from keyboards.admin_keyboards import admin_keyboard
from keyboards.user_keyboard import user_keyboard
from states.service_states import ServiceState

admin_router = Router()


@admin_router.message(Command('start'))
async def start_handler(msg: Message):
    if msg.from_user.last_name:
        fullname = msg.from_user.first_name + ' ' + msg.from_user.last_name
    else:
        fullname = msg.from_user.first_name
    
    user = User(msg.from_user.id, msg.from_user.username, fullname, db)
    if not await user.get_user():
        await user.save()
    
    keyboard = admin_keyboard if await user.check_status() else user_keyboard
    await msg.answer('–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø–∞—Ä–∏–∫–º–∞—Ö–µ—Ä—Å–∫–æ–π! üíá‚Äç‚ôÄÔ∏è', reply_markup=keyboard)


@admin_router.message(lambda m: m.text == '‚ûï –î–æ–±–∞–≤–∏—Ç—å —É—Å–ª—É–≥—É')
async def add_service_handler(msg: Message, state: FSMContext):
    user = User(msg.from_user.id, msg.from_user.username, '', db)
    if not await user.check_status():
        await msg.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!')
        return
    
    await state.set_state(ServiceState.name)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:')


@admin_router.message(ServiceState.name)
async def service_name_handler(msg: Message, state: FSMContext):
    await state.update_data(name=msg.text)
    await state.set_state(ServiceState.duration)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):')


@admin_router.message(ServiceState.duration)
async def service_duration_handler(msg: Message, state: FSMContext):
    try:
        duration = int(msg.text)
        await state.update_data(duration=duration)
        await state.set_state(ServiceState.price)
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ —Ü–µ–Ω—É —É—Å–ª—É–≥–∏:')
    except ValueError:
        await msg.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–º–∏–Ω—É—Ç—ã):')


@admin_router.message(ServiceState.price)
async def service_price_handler(msg: Message, state: FSMContext):
    try:
        price = float(msg.text)
        await state.update_data(price=price)
        data = await state.get_data()
        
        service = Service(
            name=data['name'],
            duration=data['duration'],
            price=data['price'],
            db=db
        )
        
        service_id = await service.save()
        
        if service_id:
            await msg.answer(
                f'‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –¥–æ–±–∞–≤–ª–µ–Ω–∞!\n\n'
                f'üîπ –ù–∞–∑–≤–∞–Ω–∏–µ: {service.name}\n'
                f'‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {service.duration} –º–∏–Ω\n'
                f'üí∞ –¶–µ–Ω–∞: {service.price} —Ä—É–±.',
                reply_markup=admin_keyboard
            )
        else:
            await msg.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏!', reply_markup=admin_keyboard)
        
        await state.clear()
        
    except ValueError:
        await msg.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:')


@admin_router.message(lambda m: m.text == 'üìã –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —É—Å–ª—É–≥–∏')
async def view_services_admin_handler(msg: Message):
    user = User(msg.from_user.id, msg.from_user.username, '', db)
    if not await user.check_status():
        await msg.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!')
        return
    
    services = await Service.get_services(db)
    if not services:
        await msg.answer('–£—Å–ª—É–≥–∏ –ø–æ–∫–∞ –Ω–µ –¥–æ–±–∞–≤–ª–µ–Ω—ã.')
        return
    
    for service in services:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='‚úèÔ∏è –†–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å', callback_data=f'update_service={service["id"]}'),
                    InlineKeyboardButton(text='üóë –£–¥–∞–ª–∏—Ç—å', callback_data=f'delete_service={service["id"]}')
                ]
            ]
        )
        
        await msg.answer(
            f"üîπ {service['name']}\n"
            f"‚è± –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {service['duration']} –º–∏–Ω\n"
            f"üí∞ –¶–µ–Ω–∞: {service['price']} —Ä—É–±.",
            reply_markup=keyboard
        )


@admin_router.callback_query(F.data.contains('delete_service'))
async def delete_service_handler(callback: CallbackQuery):
    service_id = int(callback.data.split('=')[1])
    
    success = await Service.delete_service(service_id, db)
    
    if success:
        await callback.message.delete()
        await callback.answer('‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω–∞!', show_alert=True)
    else:
        await callback.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏!')


@admin_router.callback_query(F.data.contains('update_service'))
async def update_service_handler(callback: CallbackQuery, state: FSMContext):
    service_id = int(callback.data.split('=')[1])
    await state.update_data(update_service_id=service_id)
    await state.set_state(ServiceState.update_name)
    await callback.message.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤–æ–µ –Ω–∞–∑–≤–∞–Ω–∏–µ —É—Å–ª—É–≥–∏:')
    await callback.answer()


@admin_router.message(ServiceState.update_name)
async def update_service_name_handler(msg: Message, state: FSMContext):
    await state.update_data(update_name=msg.text)
    await state.set_state(ServiceState.update_duration)
    await msg.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é –¥–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å —É—Å–ª—É–≥–∏ (–≤ –º–∏–Ω—É—Ç–∞—Ö):')


@admin_router.message(ServiceState.update_duration)
async def update_service_duration_handler(msg: Message, state: FSMContext):
    try:
        duration = int(msg.text)
        await state.update_data(update_duration=duration)
        await state.set_state(ServiceState.update_price)
        await msg.answer('–í–≤–µ–¥–∏—Ç–µ –Ω–æ–≤—É—é —Ü–µ–Ω—É —É—Å–ª—É–≥–∏:')
    except ValueError:
        await msg.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ (–º–∏–Ω—É—Ç—ã):')


@admin_router.message(ServiceState.update_price)
async def update_service_price_handler(msg: Message, state: FSMContext):
    try:
        price = float(msg.text)
        await state.update_data(update_price=price)
        data = await state.get_data()
        
        success = await Service.update_service(
            service_id=data['update_service_id'],
            name=data['update_name'],
            duration=data['update_duration'],
            price=data['update_price'],
            db=db
        )
        
        if success:
            await msg.answer('‚úÖ –£—Å–ª—É–≥–∞ —É—Å–ø–µ—à–Ω–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∞!', reply_markup=admin_keyboard)
        else:
            await msg.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ —É—Å–ª—É–≥–∏!', reply_markup=admin_keyboard)
        
        await state.clear()
        
    except ValueError:
        await msg.answer('–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Ü–µ–Ω—ã. –í–≤–µ–¥–∏—Ç–µ —á–∏—Å–ª–æ:')


@admin_router.message(lambda m: m.text == 'üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å')
async def view_queue_handler(msg: Message):
    user = User(msg.from_user.id, msg.from_user.username, '', db)
    if not await user.check_status():
        await msg.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!')
        return
    
    entries = await QueueEntry.get_all_queue(db)
    
    if not entries:
        await msg.answer('–û—á–µ—Ä–µ–¥—å –ø—É—Å—Ç–∞.')
        return
    
    for entry in entries:
        keyboard = InlineKeyboardMarkup(
            inline_keyboard=[
                [
                    InlineKeyboardButton(text='‚úÖ –í—ã–ø–æ–ª–Ω–µ–Ω–æ', callback_data=f'complete_entry={entry["id"]}'),
                    InlineKeyboardButton(text='‚ùå –û—Ç–º–µ–Ω–∏—Ç—å', callback_data=f'cancel_admin_entry={entry["id"]}')
                ],
                [
                    InlineKeyboardButton(text='üîº –í–≤–µ—Ä—Ö', callback_data=f'move_up={entry["id"]}'),
                    InlineKeyboardButton(text='üîΩ –í–Ω–∏–∑', callback_data=f'move_down={entry["id"]}')
                ]
            ]
        )
        
        await msg.answer(
            f"üìã –ó–∞–ø–∏—Å—å #{entry['position']}\n\n"
            f"üë§ –ö–ª–∏–µ–Ω—Ç: {entry['full_name']} (@{entry['username'] or '–Ω–µ—Ç'})\n"
            f"üîπ –£—Å–ª—É–≥–∞: {entry['service_name']}\n"
            f"‚è± –í—Ä–µ–º—è: {entry['scheduled_time'].strftime('%d.%m.%Y %H:%M')}\n"
            f"üí∞ –¶–µ–Ω–∞: {entry['price']} —Ä—É–±.\n"
            f"üìÖ –°–æ–∑–¥–∞–Ω–æ: {entry['created_at'].strftime('%d.%m.%Y %H:%M')}",
            reply_markup=keyboard
        )


@admin_router.callback_query(F.data.contains('complete_entry'))
async def complete_entry_handler(callback: CallbackQuery):
    entry_id = int(callback.data.split('=')[1])
    
    success = await QueueEntry.update_status(entry_id, 'completed', db)
    
    if success:
        await callback.message.edit_text('‚úÖ –ó–∞–ø–∏—Å—å –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω–∞—è!')
        await callback.answer('–ó–∞–ø–∏—Å—å –≤—ã–ø–æ–ª–Ω–µ–Ω–∞!')
    else:
        await callback.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–ø–∏—Å–∏!')


@admin_router.callback_query(F.data.contains('cancel_admin_entry'))
async def cancel_admin_entry_handler(callback: CallbackQuery):
    entry_id = int(callback.data.split('=')[1])
    
    success = await QueueEntry.update_status(entry_id, 'cancelled', db)
    
    if success:
        await callback.message.edit_text('‚ùå –ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–æ–º!')
        await callback.answer('–ó–∞–ø–∏—Å—å –æ—Ç–º–µ–Ω–µ–Ω–∞!')
    else:
        await callback.answer('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–º–µ–Ω–µ –∑–∞–ø–∏—Å–∏!')


@admin_router.callback_query(F.data.contains('move_up'))
async def move_up_handler(callback: CallbackQuery):
    entry_id = int(callback.data.split('=')[1])
    
    success = await QueueEntry.change_position(entry_id, 'up', db)
    
    if success:
        await callback.answer('‚úÖ –ó–∞–ø–∏—Å—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤–≤–µ—Ä—Ö!', show_alert=True)
        await callback.message.answer('–û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.')
    else:
        await callback.answer('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤—ã—à–µ! –ó–∞–ø–∏—Å—å —É–∂–µ –ø–µ—Ä–≤–∞—è –≤ –æ—á–µ—Ä–µ–¥–∏.', show_alert=True)


@admin_router.callback_query(F.data.contains('move_down'))
async def move_down_handler(callback: CallbackQuery):
    entry_id = int(callback.data.split('=')[1])
    
    success = await QueueEntry.change_position(entry_id, 'down', db)
    
    if success:
        await callback.answer('‚úÖ –ó–∞–ø–∏—Å—å –ø–µ—Ä–µ–º–µ—â–µ–Ω–∞ –≤–Ω–∏–∑!', show_alert=True)
        await callback.message.answer('–û—á–µ—Ä–µ–¥—å –æ–±–Ω–æ–≤–ª–µ–Ω–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ "üìä –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –æ—á–µ—Ä–µ–¥—å" –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –∏–∑–º–µ–Ω–µ–Ω–∏–π.')
    else:
        await callback.answer('‚ùå –ù–µ–≤–æ–∑–º–æ–∂–Ω–æ –ø–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –Ω–∏–∂–µ! –ó–∞–ø–∏—Å—å —É–∂–µ –ø–æ—Å–ª–µ–¥–Ω—è—è –≤ –æ—á–µ—Ä–µ–¥–∏.', show_alert=True)


@admin_router.message(lambda m: m.text == 'üë• –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π')
async def view_users_handler(msg: Message):
    user = User(msg.from_user.id, msg.from_user.username, '', db)
    if not await user.check_status():
        await msg.answer('‚ùå –£ –≤–∞—Å –Ω–µ—Ç –ø—Ä–∞–≤ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞!')
        return
    
    users = await User.get_all_users(db)
    
    if not users:
        await msg.answer('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã.')
        return
    
    for user_data in users:
        status = "üëë –ê–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä" if user_data['is_staff'] else "üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å"
        await msg.answer(
            f"{status}\n\n"
            f"üÜî ID: {user_data['telegram_id']}\n"
            f"üë§ –ò–º—è: {user_data['full_name']}\n"
            f"üì± Username: @{user_data['username'] or '–Ω–µ—Ç'}\n"
            f"üìÖ –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è: {user_data['created_at'].strftime('%d.%m.%Y %H:%M')}"
        )



@admin_router.message(Command('add_service'))
async def add_service_command(msg: Message, state: FSMContext):
    await add_service_handler(msg, state)


@admin_router.message(Command('view_services'))
async def view_services_command(msg: Message):
    await view_services_admin_handler(msg)


@admin_router.message(Command('view_queue'))
async def view_queue_command(msg: Message):
    await view_queue_handler(msg)